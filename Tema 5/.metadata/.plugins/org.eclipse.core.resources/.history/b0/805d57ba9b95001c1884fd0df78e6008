package srdplas.ep;

import java.util.*;

public class PuertaUrbanizacion {

	private Map<Integer, Tarjeta> tarjetasPermitidas;
	private Set<Tarjeta> tarjetasDentro;

	public PuertaUrbanizacion() {
		tarjetasPermitidas = new HashMap<Integer, Tarjeta>();
		tarjetasDentro = new HashSet<Tarjeta>();
	}

	public void agregaTarjetaPermitida(Tarjeta t) {

		if (!tarjetasPermitidas.containsValue(t)) {
			tarjetasPermitidas.put(t.getIdentificador(), t);
			System.out.println("TARJETA " + t.getIdentificador() + " AÑADIDA CORRECTAMENTE.");
		} else {
			System.out.println("ERROR LA TARJETA " + t.getIdentificador() + " YA ESTABA PERMITIDA");
		}
	}

	public void eliminaTarjetaPermitida(int identificador) {
		int i = -1;
		Set<Integer> conjunto = tarjetasPermitidas.keySet();
		Iterator<Integer> iterador = conjunto.iterator();
		while (iterador.hasNext()) {
			Integer lectura = (Integer) (iterador.next());
			if (lectura == identificador) {
				tarjetasDentro.remove(tarjetasPermitidas.get(lectura)); 
				tarjetasPermitidas.remove(lectura);
				
				//DEBEMOS BORRAR LA TARJETA PERMITIDA BORRADA DE TARJETADENTRO, PORQUE PODRÍA METER EL COCHE BORRARLO PERMITIDA Y NO PODER SACARLO EL COCHE
				System.out.println("SE HA BORRADO CORRECTAMENTE LA TARJETA " + lectura);
				i = 1;
			}
		}
		if (i == -1) {
			System.out.println("ERROR NO SE HA ENCONTRADO LA TARJETA " + identificador);
		}

//		if (tarjetasPermitidas.containsKey(id)) {
//			System.out.println("Borrando la Tarjeta " + id);
//			tarjetasPermitidas.remove(id);
//		} else {
//			System.out.println("ERROR NO SE HA ENCONTRADO LA TARJERTA");
//		}

	}

	public void imprimeTarjetasPermitidas() {

		Set<Integer> conjunto = tarjetasPermitidas.keySet();
		Iterator<Integer> iterador = conjunto.iterator();
		System.out.println("\nTARJETAS PERMITIDAS");
		while (iterador.hasNext()) {
			Integer cod = (Integer) (iterador.next());
			System.out.println(tarjetasPermitidas.get(cod));
		}
		System.out.println();
	}

	public void intentoDeEntrada(int identificador) {
		int i = -1;
		Set<Integer> conjunto = tarjetasPermitidas.keySet();
		Collection<Tarjeta> contenido = tarjetasPermitidas.values();

		Iterator<Integer> iterador = conjunto.iterator();

		while (iterador.hasNext()) {

			Integer lectura = (Integer) (iterador.next());

			if (lectura == id) { // SI ESTÁ EN TARJETAS PERMITIDAS

				if (!(tarjetasDentro.contains(tarjetasPermitidas.get(lectura)))) { // SI LA TARJETA ESTÁ EN LAS TARJETAS
																					// DENTRO

					tarjetasDentro.add(tarjetasPermitidas.get(lectura));
					System.out.println("SE HA USADO LA TARJETA " + lectura + " ENTRANDO...");
					i = 0;

				} else {
					System.out.println("TARJETA " + id+ " ERROR HAY UN COCHE EN LA PLAZA, RECUERDE UN PROPIETARIO UNA SOLO VEHICULO");
					i=1;
				}

			}

		}
		if (i == -1) {
			System.out.println("ERROR NO SE PUDO ENTRAR DEL GARAJE TARJETA " + id + " NO PERMITIDA");
		}

	}

	public void intentoDeSalida(int id) {
		int i = -1;
		Set<Integer> conjunto = tarjetasPermitidas.keySet();
		Collection<Tarjeta> contenido = tarjetasPermitidas.values();

		Iterator<Integer> iterador = conjunto.iterator();

		while (iterador.hasNext()) {

			Integer lectura = (Integer) (iterador.next());

			if (lectura == id) { // SI ESTÁ EN TARJETAS PERMITIDAS

				if (tarjetasDentro.contains(tarjetasPermitidas.get(lectura))) { // SI LA TARJETA ESTÁ EN LAS TARJETAS
																				// DENTRO

					tarjetasDentro.remove(tarjetasPermitidas.get(lectura));
					System.out.println("SE HA USADO LA TARJETA " + lectura + " SALIENDO...");
					i = 0;

				} else {
					System.out.println("ERROR TARJETA "+id+" NO HAY NINGUN COCHE EN LA PLAZA, ¿LO DEJASTE EN LA CALLE?");
					i=1;
				}

			}

		}
		if (i == -1) {
			System.out.println("ERROR NO SE PUDO SALIR DEL GARAJE TARJETA " + id + " NO PERMITIDA");
		}

	}

	public void estadoParking() {
		System.out.println("COCHES DEL PARKING");
		Iterator<Tarjeta> iterador = tarjetasDentro.iterator();
		while (iterador.hasNext()) {
			Tarjeta leer = (Tarjeta) (iterador.next());
			System.out.println(leer);
		}

	}

}
